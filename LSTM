import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers import Dropout, Dense, LSTM
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score,explained_variance_score
import math
SL = pd.read_csv(r"\Spyder\MyPython\mytest\SData\SMD.csv")
training_set = SL.iloc[0:9849- 980, 0:7].values
test_set = SL.iloc[9849- 980:9849, 0:7].values
Power = SL.iloc[0:9849 - 980, 6:7].values

sc = MinMaxScaler(feature_range=(0, 1)) 
training_set_scaled = sc.fit_transform(training_set)  
test_set = sc.transform(test_set) 
ss = MinMaxScaler(feature_range=(0, 1))
Power_set = ss.fit_transform(Power)

x_train = []
y_train = []

x_test = []
y_test = []

for i in range(49, len(training_set_scaled)):
    x_train.append(training_set_scaled[i - 49:i, 0:7])
    y_train.append(training_set_scaled[i, 6])

print(x_train)
np.random.seed(6)
np.random.shuffle(x_train)
np.random.seed(6)
np.random.shuffle(y_train)
tf.random.set_seed(6)

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], 49, 7))
for i in range(49, len(test_set)):
    x_test.append(test_set[i - 49:i, 0:7])
    y_test.append(test_set[i, 6])
x_test, y_test = np.array(x_test), np.array(y_test)
x_test = np.reshape(x_test, (x_test.shape[0], 49, 7))

model = tf.keras.Sequential([
    LSTM(128, return_sequences=True),
    Dropout(0.2),
    LSTM(128),
    Dropout(0.2),
    Dense(1)
])

model.compile(optimizer=tf.keras.optimizers.Adam(0.001),
              loss='mean_squared_error')  


history = model.fit(x_train, y_train, batch_size=32, epochs=50, validation_data=(x_test, y_test), validation_freq=1,)

model.summary()

# file = open('./tS1BIGRUweights.txt', 'w')  
# for v in model.trainable_variables:
#     file.write(str(v.name) + '\n')
#     file.write(str(v.shape) + '\n')
#     file.write(str(v.numpy()) + '\n')
# file.close()

################## predict ######################

predicted_power = model.predict(x_test)
predicted_power = ss.inverse_transform(predicted_power)
predicted_power[predicted_power<0] = 0
predicted_power = predicted_power[:,0:1]
real_power = SL.iloc[9849-931:9849, 6:7].values

# plt.plot(real_power, color='red', label='power')
# plt.plot(predicted_power, color='blue', label='Predicted power')
# plt.title('power prediction')
# plt.xlabel('Time')
# plt.ylabel('power')
# plt.legend()
# plt.show()

##########evaluate##############
# mse = mean_squared_error(predicted_power, real_power)
rmse = math.sqrt(mean_squared_error(predicted_power, real_power))
mae = mean_absolute_error(predicted_power, real_power)
R2 = r2_score(predicted_power, real_power)
# evs = explained_variance_score(predicted_power, real_power)
def mape(predicted_power, real_power):
    mask=real_power!=0
    return np.mean(np.abs((predicted_power[mask] - real_power[mask]) / real_power[mask]))*100


